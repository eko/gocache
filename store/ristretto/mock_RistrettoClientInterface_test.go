// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ristretto

import (
	"time"

	"github.com/dgraph-io/ristretto/v2"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRistrettoClientInterface creates a new instance of MockRistrettoClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRistrettoClientInterface[K ristretto.Key, V any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRistrettoClientInterface[K, V] {
	mock := &MockRistrettoClientInterface[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRistrettoClientInterface is an autogenerated mock type for the RistrettoClientInterface type
type MockRistrettoClientInterface[K ristretto.Key, V any] struct {
	mock.Mock
}

type MockRistrettoClientInterface_Expecter[K ristretto.Key, V any] struct {
	mock *mock.Mock
}

func (_m *MockRistrettoClientInterface[K, V]) EXPECT() *MockRistrettoClientInterface_Expecter[K, V] {
	return &MockRistrettoClientInterface_Expecter[K, V]{mock: &_m.Mock}
}

// Clear provides a mock function for the type MockRistrettoClientInterface
func (_mock *MockRistrettoClientInterface[K, V]) Clear() {
	_mock.Called()
	return
}

// MockRistrettoClientInterface_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockRistrettoClientInterface_Clear_Call[K ristretto.Key, V any] struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockRistrettoClientInterface_Expecter[K, V]) Clear() *MockRistrettoClientInterface_Clear_Call[K, V] {
	return &MockRistrettoClientInterface_Clear_Call[K, V]{Call: _e.mock.On("Clear")}
}

func (_c *MockRistrettoClientInterface_Clear_Call[K, V]) Run(run func()) *MockRistrettoClientInterface_Clear_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRistrettoClientInterface_Clear_Call[K, V]) Return() *MockRistrettoClientInterface_Clear_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockRistrettoClientInterface_Clear_Call[K, V]) RunAndReturn(run func()) *MockRistrettoClientInterface_Clear_Call[K, V] {
	_c.Run(run)
	return _c
}

// Del provides a mock function for the type MockRistrettoClientInterface
func (_mock *MockRistrettoClientInterface[K, V]) Del(key K) {
	_mock.Called(key)
	return
}

// MockRistrettoClientInterface_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockRistrettoClientInterface_Del_Call[K ristretto.Key, V any] struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key K
func (_e *MockRistrettoClientInterface_Expecter[K, V]) Del(key interface{}) *MockRistrettoClientInterface_Del_Call[K, V] {
	return &MockRistrettoClientInterface_Del_Call[K, V]{Call: _e.mock.On("Del", key)}
}

func (_c *MockRistrettoClientInterface_Del_Call[K, V]) Run(run func(key K)) *MockRistrettoClientInterface_Del_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRistrettoClientInterface_Del_Call[K, V]) Return() *MockRistrettoClientInterface_Del_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockRistrettoClientInterface_Del_Call[K, V]) RunAndReturn(run func(key K)) *MockRistrettoClientInterface_Del_Call[K, V] {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type MockRistrettoClientInterface
func (_mock *MockRistrettoClientInterface[K, V]) Get(key K) (V, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 V
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(K) V); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(V)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(K) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockRistrettoClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRistrettoClientInterface_Get_Call[K ristretto.Key, V any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key K
func (_e *MockRistrettoClientInterface_Expecter[K, V]) Get(key interface{}) *MockRistrettoClientInterface_Get_Call[K, V] {
	return &MockRistrettoClientInterface_Get_Call[K, V]{Call: _e.mock.On("Get", key)}
}

func (_c *MockRistrettoClientInterface_Get_Call[K, V]) Run(run func(key K)) *MockRistrettoClientInterface_Get_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRistrettoClientInterface_Get_Call[K, V]) Return(v V, b bool) *MockRistrettoClientInterface_Get_Call[K, V] {
	_c.Call.Return(v, b)
	return _c
}

func (_c *MockRistrettoClientInterface_Get_Call[K, V]) RunAndReturn(run func(key K) (V, bool)) *MockRistrettoClientInterface_Get_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetTTL provides a mock function for the type MockRistrettoClientInterface
func (_mock *MockRistrettoClientInterface[K, V]) GetTTL(key K) (time.Duration, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetTTL")
	}

	var r0 time.Duration
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(K) (time.Duration, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(K) time.Duration); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(K) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockRistrettoClientInterface_GetTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTTL'
type MockRistrettoClientInterface_GetTTL_Call[K ristretto.Key, V any] struct {
	*mock.Call
}

// GetTTL is a helper method to define mock.On call
//   - key K
func (_e *MockRistrettoClientInterface_Expecter[K, V]) GetTTL(key interface{}) *MockRistrettoClientInterface_GetTTL_Call[K, V] {
	return &MockRistrettoClientInterface_GetTTL_Call[K, V]{Call: _e.mock.On("GetTTL", key)}
}

func (_c *MockRistrettoClientInterface_GetTTL_Call[K, V]) Run(run func(key K)) *MockRistrettoClientInterface_GetTTL_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRistrettoClientInterface_GetTTL_Call[K, V]) Return(duration time.Duration, b bool) *MockRistrettoClientInterface_GetTTL_Call[K, V] {
	_c.Call.Return(duration, b)
	return _c
}

func (_c *MockRistrettoClientInterface_GetTTL_Call[K, V]) RunAndReturn(run func(key K) (time.Duration, bool)) *MockRistrettoClientInterface_GetTTL_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// SetWithTTL provides a mock function for the type MockRistrettoClientInterface
func (_mock *MockRistrettoClientInterface[K, V]) SetWithTTL(key K, value V, cost int64, ttl time.Duration) bool {
	ret := _mock.Called(key, value, cost, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetWithTTL")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(K, V, int64, time.Duration) bool); ok {
		r0 = returnFunc(key, value, cost, ttl)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockRistrettoClientInterface_SetWithTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWithTTL'
type MockRistrettoClientInterface_SetWithTTL_Call[K ristretto.Key, V any] struct {
	*mock.Call
}

// SetWithTTL is a helper method to define mock.On call
//   - key K
//   - value V
//   - cost int64
//   - ttl time.Duration
func (_e *MockRistrettoClientInterface_Expecter[K, V]) SetWithTTL(key interface{}, value interface{}, cost interface{}, ttl interface{}) *MockRistrettoClientInterface_SetWithTTL_Call[K, V] {
	return &MockRistrettoClientInterface_SetWithTTL_Call[K, V]{Call: _e.mock.On("SetWithTTL", key, value, cost, ttl)}
}

func (_c *MockRistrettoClientInterface_SetWithTTL_Call[K, V]) Run(run func(key K, value V, cost int64, ttl time.Duration)) *MockRistrettoClientInterface_SetWithTTL_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 V
		if args[1] != nil {
			arg1 = args[1].(V)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRistrettoClientInterface_SetWithTTL_Call[K, V]) Return(b bool) *MockRistrettoClientInterface_SetWithTTL_Call[K, V] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockRistrettoClientInterface_SetWithTTL_Call[K, V]) RunAndReturn(run func(key K, value V, cost int64, ttl time.Duration) bool) *MockRistrettoClientInterface_SetWithTTL_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function for the type MockRistrettoClientInterface
func (_mock *MockRistrettoClientInterface[K, V]) Wait() {
	_mock.Called()
	return
}

// MockRistrettoClientInterface_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockRistrettoClientInterface_Wait_Call[K ristretto.Key, V any] struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *MockRistrettoClientInterface_Expecter[K, V]) Wait() *MockRistrettoClientInterface_Wait_Call[K, V] {
	return &MockRistrettoClientInterface_Wait_Call[K, V]{Call: _e.mock.On("Wait")}
}

func (_c *MockRistrettoClientInterface_Wait_Call[K, V]) Run(run func()) *MockRistrettoClientInterface_Wait_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRistrettoClientInterface_Wait_Call[K, V]) Return() *MockRistrettoClientInterface_Wait_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockRistrettoClientInterface_Wait_Call[K, V]) RunAndReturn(run func()) *MockRistrettoClientInterface_Wait_Call[K, V] {
	_c.Run(run)
	return _c
}
